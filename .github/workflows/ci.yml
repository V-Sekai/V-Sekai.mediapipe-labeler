---
name: CI
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.9'
            - name: Set up Docker
              uses: docker/setup-docker-action@v4
            - name: Setup Cog
              uses: replicate/setup-cog@v2
              with:
                  token: ${{ secrets.REPLICATE_CLI_AUTH_TOKEN }}
            - name: Run tests (Cog) with video integration
              run: |
                  media_path="@thirdparty/20250401-0707-12.7226723.mp4"
                  cog predict -i test_mode=True -i export_train=True -i "media_path=$media_path" | \
                  tee \
                    >(jq -r '.debug_media' > debug_output_video.zip) \
                    >(jq -r '.annotations' > annotations_video.json) \
                  >/dev/null
            - name: Run tests (Cog) with image integration
              run: |
                  media_path="@thirdparty/image.jpg"
                  cog predict -i export_train=True -i "media_path=$media_path" | \
                  tee \
                    >(jq -r '.debug_media' > debug_output_image.zip) \
                    >(jq -r '.annotations' > annotations_image.json) \
                  >/dev/null
            - name: Upload test artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: test-artifacts
                  path: |
                      debug_output_video.zip
                      annotations_video.json
                      debug_output_image.zip
                      annotations_image.json
            # - name: Check artifact mime types
            #   run: |
            #       for file in debug_output_video.zip annotations_video.json debug_output_image.zip annotations_image.json; do
            #         mime=$(file --mime-type -b "$file")
            #         case "$file" in
            #           *.zip)
            #             expected="application/zip"
            #             ;;
            #           *.json)
            #             expected="application/json"
            #             ;;
            #           *)
            #             expected=""
            #             ;;
            #         esac
            #         if [ "$mime" != "$expected" ]; then
            #           echo "Error: $file has mime type $mime but expected $expected."
            #           exit 1
            #         fi
            #       done
            - name: Push to Replicate
              if: github.ref == 'refs/heads/main'
              run: |
                  cog push r8.im/fire/v-sekai.mediapipe-labeler
